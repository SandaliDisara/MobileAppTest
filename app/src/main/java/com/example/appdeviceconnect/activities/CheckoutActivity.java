package com.example.appdeviceconnect.activities;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import com.example.appdeviceconnect.R;
import com.example.appdeviceconnect.models.Order;
import com.example.appdeviceconnect.models.ProductOrder;
import com.example.appdeviceconnect.models.CartItem;
import com.example.appdeviceconnect.network.ApiService;
import com.example.appdeviceconnect.network.RetrofitClient;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class CheckoutActivity extends AppCompatActivity {
    private EditText addressInput;
    private Button payNowButton;
    private List<CartItem> cartItems;
    private double totalPrice;
    private String customerId;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_checkout);

        // Get data from Intent
        cartItems = getIntent().getParcelableArrayListExtra("cartItems"); // Get cart items
        totalPrice = getIntent().getDoubleExtra("totalPrice", 0.0); // Get total price

        // Retrieve customerId from SharedPreferences
        SharedPreferences sharedPreferences = getSharedPreferences("AppPrefs", MODE_PRIVATE);
        customerId = sharedPreferences.getString("customerId", null);

        // Initialize UI components
        addressInput = findViewById(R.id.addressEditText);
        payNowButton = findViewById(R.id.payNowButton);

        // Set up Pay Now button click listener
        payNowButton.setOnClickListener(v -> {
            String address = addressInput.getText().toString().trim();

            if (address.isEmpty()) {
                Toast.makeText(this, "Please enter a delivery address", Toast.LENGTH_SHORT).show();
            } else {
                // Create the order and send it to the backend
                createOrder(address);
            }
        });
    }

    private void createOrder(String address) {
        // Convert cart items to order products
        List<ProductOrder> products = new ArrayList<>();
        for (CartItem cartItem : cartItems) {
            products.add(new ProductOrder(
                    cartItem.getProductId(),
                    cartItem.getProductName(),
                    cartItem.getQuantity(),
                    cartItem.getPrice(),
                    "Ordered", // Default status for newly placed orders
                    cartItem.getVendorId() // Ensure the vendorId is passed here
            ));
        }

        // Format the current date
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.getDefault());
        String currentDate = dateFormat.format(new Date());

        // Create the Order object
        Order order = new Order(
                null, // ID will be generated by the backend
                customerId,
                products,
                address,
                totalPrice,
                "Pending", // Order status
                currentDate // Formatted current date
        );

        // Send the order to the backend
        sendOrderToBackend(order);
    }



    private void sendOrderToBackend(Order order) {
        ApiService apiService = RetrofitClient.getRetrofitInstance().create(ApiService.class);
        Call<Void> call = apiService.createOrder(order);

        call.enqueue(new Callback<Void>() {
            @Override
            public void onResponse(Call<Void> call, Response<Void> response) {
                if (response.isSuccessful()) {
                    Toast.makeText(CheckoutActivity.this, "Order placed successfully!", Toast.LENGTH_SHORT).show();
                    navigateToOrderSuccess(); // Navigate after success
                } else {
                    Toast.makeText(CheckoutActivity.this, "Failed to place order: " + response.message(), Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(Call<Void> call, Throwable t) {
                Toast.makeText(CheckoutActivity.this, "Error: " + t.getMessage(), Toast.LENGTH_SHORT).show();
            }
        });
    }

    private void navigateToOrderSuccess() {
        // You can navigate to a new activity or show a success message
        Intent intent = new Intent(CheckoutActivity.this, OrderSuccessActivity.class);
        startActivity(intent);
        finish(); // Close the current activity
    }
}
